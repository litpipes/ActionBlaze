on:
  workflow_call:
    inputs:
      repository_name:
        required: true 
        type: string
    outputs:
      ecr_image_tag:
        value: ${{ jobs.build-image.outputs.ecr_image_tag }}
    secrets:
      AWS_ROLE:
        required: true

jobs:
  build-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      ecr_image_tag: ${{ steps.build-image.outputs.ecr_image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ROLE }}"
          output-credentials: true
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push the image to Amazon ECR
        if: ${{ vars.ECR_REPOSITORY != null }}
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.repo_name }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo ecr_image_tag=$IMAGE_TAG >> $GITHUB_OUTPUT
          echo $IMAGE_TAG